# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'matplotlibPractice.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np
import os
from pathlib import Path
import matlab.engine
import shutil
import scipy.interpolate as inter
import math

from PIL import Image, ImageEnhance

from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtWidgets import QLabel, QFileDialog, QMainWindow, QLineEdit, QWidget
from PyQt5.QtGui import QImage, QPixmap, QMouseEvent, QPainter, QWheelEvent, QPaintEvent 

eng = matlab.engine.start_matlab()

pointsPlotted_x = []
pointsPlotted_y = []

class Ui_roughGUI(object):
    def setupUi(self, roughGUI):
        roughGUI.setObjectName("roughGUI")
        roughGUI.resize(1175, 749)
        self.niftiLabel = QtWidgets.QLabel(roughGUI)
        self.niftiLabel.setGeometry(QtCore.QRect(10, 10, 201, 51))
        self.niftiLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.niftiLabel.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.niftiLabel.setObjectName("niftiLabel")
        self.chooseDataButton = QtWidgets.QPushButton(roughGUI)
        self.chooseDataButton.setGeometry(QtCore.QRect(0, 100, 113, 32))
        self.chooseDataButton.setObjectName("chooseDataButton")
        self.openImage = QtWidgets.QPushButton(roughGUI)
        self.openImage.setGeometry(QtCore.QRect(170, 150, 111, 32))
        self.openImage.setObjectName("openImage")
        self.instrFunctLabel = QtWidgets.QLabel(roughGUI)
        self.instrFunctLabel.setGeometry(QtCore.QRect(40, 200, 331, 16))
        self.instrFunctLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.instrFunctLabel.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.instrFunctLabel.setObjectName("instrFunctLabel")
        self.drawROI = QtWidgets.QPushButton(roughGUI)
        self.drawROI.setGeometry(QtCore.QRect(0, 230, 121, 32))
        self.drawROI.setObjectName("drawROI")
        self.displayTICButton = QtWidgets.QPushButton(roughGUI)
        self.displayTICButton.setGeometry(QtCore.QRect(0, 320, 201, 32))
        self.displayTICButton.setObjectName("displayTICButton")
        self.label1 = QtWidgets.QLabel(roughGUI)
        self.label1.setGeometry(QtCore.QRect(640, 180, 331, 16))
        self.label1.setAlignment(QtCore.Qt.AlignCenter)
        self.label1.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label1.setObjectName("label1")
        self.line1 = QtWidgets.QFrame(roughGUI)
        self.line1.setGeometry(QtCore.QRect(0, 180, 461, 21))
        self.line1.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1.setObjectName("line1")
        self.line2 = QtWidgets.QFrame(roughGUI)
        self.line2.setGeometry(QtCore.QRect(440, 0, 41, 191))
        self.line2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2.setObjectName("line2")
        self.computeWindows = QtWidgets.QPushButton(roughGUI)
        self.computeWindows.setGeometry(QtCore.QRect(130, 270, 151, 32))
        self.computeWindows.setObjectName("computeWindows")
        self.undoLastROIButton = QtWidgets.QPushButton(roughGUI)
        self.undoLastROIButton.setGeometry(QtCore.QRect(120, 230, 161, 32))
        self.undoLastROIButton.setObjectName("undoLastROIButton")
        self.clearDataPathButton = QtWidgets.QPushButton(roughGUI)
        self.clearDataPathButton.setGeometry(QtCore.QRect(110, 100, 113, 32))
        self.clearDataPathButton.setObjectName("clearDataPathButton")
        self.acceptROI = QtWidgets.QPushButton(roughGUI)
        self.acceptROI.setGeometry(QtCore.QRect(290, 230, 131, 32))
        self.acceptROI.setObjectName("acceptROI")
        self.expandImage = QtWidgets.QPushButton(roughGUI)
        self.expandImage.setGeometry(QtCore.QRect(120, 500, 171, 31))
        self.expandImage.setObjectName("expandImage")
        self.line1_2 = QtWidgets.QFrame(roughGUI)
        self.line1_2.setGeometry(QtCore.QRect(0, 450, 381, 16))
        self.line1_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1_2.setObjectName("line1_2")
        self.closeExpand = QtWidgets.QPushButton(roughGUI)
        self.closeExpand.setGeometry(QtCore.QRect(120, 540, 171, 32))
        self.closeExpand.setObjectName("closeExpand")
        self.displayComparison = QtWidgets.QPushButton(roughGUI)
        self.displayComparison.setGeometry(QtCore.QRect(100, 370, 211, 32))
        self.displayComparison.setObjectName("displayComparison")
        self.line = QtWidgets.QFrame(roughGUI)
        self.line.setGeometry(QtCore.QRect(210, 0, 31, 141))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.choosePhantomButton = QtWidgets.QPushButton(roughGUI)
        self.choosePhantomButton.setGeometry(QtCore.QRect(230, 100, 113, 32))
        self.choosePhantomButton.setObjectName("choosePhantomButton")
        self.clearPhantomPathButton = QtWidgets.QPushButton(roughGUI)
        self.clearPhantomPathButton.setGeometry(QtCore.QRect(340, 100, 113, 32))
        self.clearPhantomPathButton.setObjectName("clearPhantomPathButton")
        self.instrFunctLabel_2 = QtWidgets.QLabel(roughGUI)
        self.instrFunctLabel_2.setGeometry(QtCore.QRect(40, 470, 331, 16))
        self.instrFunctLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.instrFunctLabel_2.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.instrFunctLabel_2.setObjectName("instrFunctLabel_2")
        self.dataPathInput = QtWidgets.QLineEdit(roughGUI)
        self.dataPathInput.setGeometry(QtCore.QRect(10, 60, 201, 31))
        self.dataPathInput.setObjectName("dataPathInput")
        self.phantomPathInput = QtWidgets.QLineEdit(roughGUI)
        self.phantomPathInput.setGeometry(QtCore.QRect(240, 60, 201, 31))
        self.phantomPathInput.setObjectName("phantomPathInput")
        self.label_4 = QtWidgets.QLabel(roughGUI)
        self.label_4.setGeometry(QtCore.QRect(760, 10, 161, 16))
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.feedbackScrollBar = QtWidgets.QScrollBar(roughGUI)
        self.feedbackScrollBar.setGeometry(QtCore.QRect(1100, 30, 20, 71))
        self.feedbackScrollBar.setOrientation(QtCore.Qt.Vertical)
        self.feedbackScrollBar.setObjectName("feedbackScrollBar")
        self.saveSegImg = QtWidgets.QPushButton(roughGUI)
        self.saveSegImg.setGeometry(QtCore.QRect(100, 640, 211, 32))
        self.saveSegImg.setObjectName("saveSegImg")
        self.saveOverallSegImg = QtWidgets.QPushButton(roughGUI)
        self.saveOverallSegImg.setGeometry(QtCore.QRect(200, 320, 211, 32))
        self.saveOverallSegImg.setObjectName("saveOverallSegImg")
        self.niftiLabel_2 = QtWidgets.QLabel(roughGUI)
        self.niftiLabel_2.setGeometry(QtCore.QRect(240, 10, 201, 51))
        self.niftiLabel_2.setAlignment(QtCore.Qt.AlignCenter)
        self.niftiLabel_2.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.niftiLabel_2.setObjectName("niftiLabel_2")
        self.line1_3 = QtWidgets.QFrame(roughGUI)
        self.line1_3.setGeometry(QtCore.QRect(0, 570, 401, 16))
        self.line1_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line1_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line1_3.setObjectName("line1_3")
        self.line2_2 = QtWidgets.QFrame(roughGUI)
        self.line2_2.setGeometry(QtCore.QRect(400, 190, 41, 561))
        self.line2_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line2_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2_2.setObjectName("line2_2")
        self.frame = QtWidgets.QFrame(roughGUI)
        self.frame.setGeometry(QtCore.QRect(429, 209, 721, 501))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        # Create a horizontal layout
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        ## Canvas here
        self.figure = plt.figure()
        #self.figure, self.ax = plt.subplots()
        self.canvas = FigureCanvas(self.figure)
        ## End of Canvas
        ## Add Canvas
        self.horizontalLayout.addWidget(self.canvas)
        ## end of horizontal layout

        self.retranslateUi(roughGUI)
        QtCore.QMetaObject.connectSlotsByName(roughGUI)

        os.chdir(os.fspath(Path(__file__).resolve().parent))

        self.invalidPath = QtWidgets.QLabel(roughGUI)
        self.invalidPath.setWordWrap(True)
        self.invalidPath.move(80,590) # Change size and location
        self.invalidPath.resize(341,111)
        self.invalidPath.setText("enter path or press 'choose' to browse files")

        self.inputDataTextPath = ''
        self.inputPhantomTextPath = ''

        self.data_selected = False
        self.phantom_selected = False

        self.drawROI_selected = 0

        self.chooseDataButton.clicked.connect(self.getDataTextInput)
        self.choosePhantomButton.clicked.connect(self.getPhantomTextInput)
        self.openImage.clicked.connect(self.open_image)
        self.drawROI.clicked.connect(self.record_drawROI_clicked)

    def record_drawROI_clicked(self):
        if self.drawROI_selected == 0:
            self.drawROI_selected = 1
            self.plotOnCanvas()
        elif self.drawROI_selected == 1:
            self.drawROI_selected = 2
            self.plotOnCanvas()
        else:
            self.drawROI_selected = 1
            self.plotOnCanvas()
    
    def open_image(self):
        if self.phantom_selected == True and self.data_selected == True:
            tmp_location = self.dataPathInput.text().split("/")
            data_file_name = tmp_location[len(tmp_location)-1]
            data_file_location = self.dataPathInput.text()[:len(self.dataPathInput.text())-len(data_file_name)]
            tmp_phant_location = self.phantomPathInput.text().split("/")
            phant_file_name = tmp_phant_location[len(tmp_phant_location)-1]
            phant_file_location = self.phantomPathInput.text()[:len(self.phantomPathInput.text())-len(phant_file_name)]
            eng.getImage(data_file_name, data_file_location, phant_file_name, phant_file_location, nargout=1)
            # self.ar_height = im_array._size[0]
            # self.ar_width = im_array._size[1]
            # self.im_data = np.array(im_array).reshape(self.ar_height, self.ar_width)
            # self.im_data = np.flipud(self.im_data) #flipud
            # self.im_data = np.require(self.im_data,np.uint8,'C')
            # self.bytes_line = self.im_data.strides[0]

            # self.q_im = QImage(self.im_data, self.ar_width, self.ar_height, self.bytes_line, QImage.Format_Grayscale8) 

            # self.q_im.mirrored().save(os.path.join("im_ROIs", "bMode_im.png")) # Save as .png file

            # cv_im = Image.open(os.path.join("im_ROIs", "bMode_im.png"))
            # enhancer = ImageEnhance.Contrast(cv_im)

            # factor = 4 
            # im_output = enhancer.enhance(factor)
            # im_output.save(os.path.join("im_ROIs", "bMode_im.png"))

            # cv_im = Image.open(os.path.join("im_ROIs", "bMode_im.png"))
            # bright = ImageEnhance.Brightness(cv_im)
            # im_output = bright.enhance(0.75)
            # im_output.save(os.path.join("im_ROIs", "bMode_im.png"))

            # cv_im = Image.open(os.path.join("im_ROIs", "bMode_im.png"))
            # sharp = ImageEnhance.Sharpness(cv_im)
            # im_output = sharp.enhance(3)
            # im_output.save(os.path.join("im_ROIs", "bMode_im.png"))

            # contrast_im = np.array(Image.open(os.path.join("im_ROIs", "bMode_im.png"))).reshape(self.ar_height, self.ar_width)
            # contrast_im = np.require(contrast_im, np.uint8, 'C')
            # contrast_bytes, _ = contrast_im.strides
            # self.q_im = QImage(contrast_im, self.ar_width, self.ar_height, contrast_bytes, QImage.Format_Grayscale8)

            # self.q_im.mirrored().save(os.path.join("im_ROIs", "bMode_im.png")) # Overwrite .png file

            Ui_roughGUI.plotOnCanvas(self)
        Ui_roughGUI.plotOnCanvas(self)

    def getDataTextInput(self):
        if os.path.exists("im_ROIs"):
            shutil.rmtree("im_ROIs") #will also remove all the drawings made

        # Original started here
        os.mkdir("im_ROIs") #for drawings

        if os.path.exists(self.dataPathInput.text()):
            self.inputDataTextPath = self.dataPathInput.text()
            self.dataPathInput.setText("valid file chosen - press 'open image'")
            self.data_selected = True
        else:
            #file_name, _ = QFileDialog.getOpenFileName(None, 'Open File', filter = '*.rf *.mat')
            file_name, _ = QFileDialog.getOpenFileName(None, 'Open File', filter = ('*.rfd'))
            if file_name != '':
                self.dataPathInput.setText(file_name)
                self.inputDataTextPath = self.dataPathInput.text()
                self.invalidPath.setText("valid file chosen - make sure both Phantom and Data files have been selected")
                self.data_selected = True

    def retranslateUi(self, roughGUI):
        _translate = QtCore.QCoreApplication.translate
        roughGUI.setWindowTitle(_translate("roughGUI", "roughGUI"))
        self.niftiLabel.setText(_translate("roughGUI", "Input path to data file\n"
#" (.rf or .mat)"))
" (.rfd)"))
        self.chooseDataButton.setText(_translate("roughGUI", "Choose File"))
        self.openImage.setText(_translate("roughGUI", "Open Image"))
        self.instrFunctLabel.setText(_translate("roughGUI", "Functions to perform once image is loaded:"))
        self.drawROI.setText(_translate("roughGUI", "Draw ROI"))
        self.displayTICButton.setText(_translate("roughGUI", "Display Time Intensity Curve"))
        self.label1.setText(_translate("roughGUI", "B-Mode Image"))
        self.computeWindows.setText(_translate("roughGUI", "Compute Windows"))
        self.undoLastROIButton.setText(_translate("roughGUI", "Undo Last ROI"))
        self.clearDataPathButton.setText(_translate("roughGUI", "Clear Path"))
        self.acceptROI.setText(_translate("roughGUI", "Accept ROI"))
        self.expandImage.setText(_translate("roughGUI", "Expand Image"))
        self.closeExpand.setText(_translate("roughGUI", "Close Expanded Image"))
        self.displayComparison.setText(_translate("roughGUI", "Display Comparison"))
        self.choosePhantomButton.setText(_translate("roughGUI", "Choose File"))
        self.clearPhantomPathButton.setText(_translate("roughGUI", "Clear Path"))
        self.instrFunctLabel_2.setText(_translate("roughGUI", "Extra Display Functions:"))
        self.label_4.setText(_translate("roughGUI", "Feedback for inputs:"))
        self.saveSegImg.setText(_translate("roughGUI", "Save Segmentation Image"))
        self.saveOverallSegImg.setText(_translate("roughGUI", "Save Overall Seg. Image"))
        self.niftiLabel_2.setText(_translate("roughGUI", "Input path to Phantom file\n"
" (.rfd)"))

    def getPhantomTextInput(self):
        #file_name, _ = QFileDialog.getOpenFileName(None, 'Open File', filter = '*.mat *.rf')
        file_name, _ = QFileDialog.getOpenFileName(None, 'Open File', filter = '*.rfd')

        if file_name != '':
            self.phantomPathInput.setText(file_name)
            self.inputPhantomTextPath = self.phantomPathInput.text()
            self.invalidPath.setText("valid file chosen - make sure both Phantom and Data files have been selected")
            self.phantom_selected = True

    def plotOnCanvas(self):
        ## Clear the canvas
        #self.figure.clear()
        im = plt.imread('/Users/elizabethszeto/Downloads/CanaryCRESTProgram/bMode_im.png')
        self.ax = self.figure.add_subplot(111)
        plt.imshow(im, cmap='Greys_r')
        image, =self.ax.plot([], [], marker="o",markersize=3, markerfacecolor="red")
        if self.drawROI_selected == 1:
            self.cid = image.figure.canvas.mpl_connect('button_press_event', on_press)
        elif self.drawROI_selected == 2:
            image.figure.canvas.mpl_disconnect(self.cid)

        if len(pointsPlotted_x) > 1:
            temp_points = []
            # for i in range(len(pointsPlotted_x)):
            #     temp_points.append([pointsPlotted_x[i], pointsPlotted_y[i]])
            # temp_points.sort()
            # sorted_x = []
            # sorted_y = []
            # for i in range(len(temp_points)):
            #     sorted_x.append(temp_points[i][0])
            #     sorted_y.append(temp_points[i][1])
            # spline = inter.CubicSpline(sorted_x, sorted_y, bc_type='natural')
            # x_new = np.linspace(sorted_x[0], sorted_x[-1], 100)
            spline = inter.CubicSpline(pointsPlotted_x, pointsPlotted_y, bc_type='natural')
            self.ax.plot(pointsPlotted_x, spline(pointsPlotted_x), color = "green", zorder=1)
        self.ax.scatter(pointsPlotted_x, pointsPlotted_y, marker="o", s=3, c="red", zorder=2)
        self.figure.tight_layout()

        # # Refresh canvas
        self.canvas.draw()

def on_press(event):
    pointsPlotted_x.append(int(event.xdata))
    pointsPlotted_y.append(int(event.ydata))

    interpolate(event)
    event.inaxes.figure.canvas.draw()

def interpolate(event):
    if len(pointsPlotted_x) > 1:
        # Refresh axis
        event.inaxes.clear()
        im = plt.imread('/Users/elizabethszeto/Downloads/CanaryCRESTProgram/USImgAnalysisGui/roughGUI/im_ROIs/bMode_im.png')
        plt.imshow(im, origin='lower', cmap='Greys_r')
        eng = matlab.engine.start_matlab()
        x_spline, y_spline = eng.calculateSpline(pointsPlotted_x, pointsPlotted_y, nargout=2)
        event.inaxes.plot(x_spline, y_spline, color = "green", zorder=1)
        eng.quit()
        
        # temp_points = []
        # for i in range(len(pointsPlotted_x)):
        #     temp_points.append([pointsPlotted_x[i], pointsPlotted_y[i]])
        # temp_points.sort()
        # sorted_x = []
        # sorted_y = []
        # for i in range(len(temp_points)):
        #     sorted_x.append(temp_points[i][0])
        #     sorted_y.append(temp_points[i][1])
        # spline = inter.CubicSpline(sorted_x, sorted_y, bc_type='natural')
        # x_new = np.linspace(sorted_x[0], sorted_x[-1], 100)
        # event.inaxes.plot(x_new, spline(x_new), color = "green", zorder=1)
        plt.tight_layout()
    event.inaxes.scatter(pointsPlotted_x, pointsPlotted_y, marker="o", s=3, c="red", zorder=2)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    roughGUI = QtWidgets.QWidget()
    ui = Ui_roughGUI()
    ui.setupUi(roughGUI)
    roughGUI.show()
    sys.exit(app.exec_())

    